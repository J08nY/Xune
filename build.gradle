plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'sk.neuromancer'
version = '1.0'
project.ext.lwjglVersion = '3.3.6'

application {
    mainClass = 'sk.neuromancer.Xune.game.Game'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl:$lwjglVersion"
	implementation "org.lwjgl:lwjgl:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion:javadoc"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opus::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opus::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-opus::natives-macos"

    implementation 'com.google.protobuf:protobuf-java:4.29.2'

    implementation 'info.picocli:picocli:4.7.6'
    implementation 'sk.neuromancer:protobuf-nio-core:1.0.4'
    implementation 'org.slf4j:slf4j-api:2.0.16'

    implementation platform('org.apache.logging.log4j:log4j-bom:2.24.3')
    implementation 'org.apache.logging.log4j:log4j-api:${log4j-api.version}'
    runtimeOnly 'org.apache.logging.log4j:log4j-core'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl'


}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        proto {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:4.29.2'
    }
    generateProtoTasks {
        ofSourceSet("main").each { task ->
            task.builtins {
                java {
                }
            }
        }
    }
}

jar {
	manifest {
		attributes 'Main-Class': application.mainClass
    }
}

tasks.register('uberJar', Jar) {
    archiveFileName = "Xune-${version}-all.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE //They are well known.

    from sourceSets.main.output

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.filter { it.name.endsWith('jar') && !it.name.contains("javadoc") && !it.name.contains("sources") }.collect { zipTree(it).matching { exclude 'META-INF/*.DSA', 'META-INF/*.SF', 'META-INF/*.RSA', 'META-INF/INDEX.LIST', 'META-INF/**/module-info.class' } }
    }
}

tasks.register('uberJarLinux', Jar) {
    archiveFileName = "Xune-${version}-linux.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE //They are well known.

    from sourceSets.main.output

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.filter { it.name.endsWith('jar') && !it.name.contains("javadoc") && !it.name.contains("sources") && (!it.name.contains("natives") || it.name.contains("natives-linux")) }.collect { zipTree(it).matching { exclude 'META-INF/*.DSA', 'META-INF/*.SF', 'META-INF/*.RSA', 'META-INF/INDEX.LIST', 'META-INF/**/module-info.class' } }
    }
}

tasks.register('uberJarWindows', Jar) {
    archiveFileName = "Xune-${version}-windows.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE //They are well known.

    from sourceSets.main.output

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.filter { it.name.endsWith('jar') && !it.name.contains("javadoc") && !it.name.contains("sources") && (!it.name.contains("natives") || it.name.contains("natives-windows")) }.collect { zipTree(it).matching { exclude 'META-INF/*.DSA', 'META-INF/*.SF', 'META-INF/*.RSA', 'META-INF/INDEX.LIST', 'META-INF/**/module-info.class' } }
    }
}

tasks.register('uberJarMacos', Jar) {
    archiveFileName = "Xune-${version}-macos.jar"
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE //They are well known.

    from sourceSets.main.output

    manifest {
        attributes 'Main-Class': application.mainClass
    }

    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.filter { it.name.endsWith('jar') && !it.name.contains("javadoc") && !it.name.contains("sources") && (!it.name.contains("natives") || it.name.contains("natives-macos")) }.collect { zipTree(it).matching { exclude 'META-INF/*.DSA', 'META-INF/*.SF', 'META-INF/*.RSA', 'META-INF/INDEX.LIST', 'META-INF/**/module-info.class' } }
    }
}