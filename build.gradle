plugins {
    id 'java'
    id 'application'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'sk.neuromancer'
version = '1.1'
project.ext.lwjglVersion = '3.3.6'

application {
    mainClass = 'sk.neuromancer.Xune.game.Game'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion:javadoc"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion:sources"
    implementation "org.lwjgl:lwjgl-opus:$lwjglVersion:javadoc"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-opus::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl-opus::natives-windows"
    runtimeOnly "org.lwjgl:lwjgl::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-opengl::natives-macos"
    runtimeOnly "org.lwjgl:lwjgl-opus::natives-macos"

    implementation 'com.google.protobuf:protobuf-java:4.29.2'

    implementation 'info.picocli:picocli:4.7.6'
    implementation 'sk.neuromancer:protobuf-nio-core:1.0.4'
    implementation 'org.slf4j:slf4j-api:2.0.16'

    implementation platform('org.apache.logging.log4j:log4j-bom:2.24.3')
    implementation 'org.apache.logging.log4j:log4j-api:${log4j-api.version}'
    runtimeOnly 'org.apache.logging.log4j:log4j-core'
    runtimeOnly 'org.apache.logging.log4j:log4j-slf4j2-impl'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        proto {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:4.29.2'
    }
    generateProtoTasks {
        ofSourceSet("main").each { task ->
            task.builtins {
                java {
                }
            }
        }
    }
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass
    }
}

def configureUberJarTask(Jar task, String archiveFileName, String mainClass, String os) {
    task.archiveFileName = archiveFileName
    task.duplicatesStrategy = DuplicatesStrategy.EXCLUDE //They are well known.

    task.from sourceSets.main.output

    task.manifest {
        attributes 'Main-Class': mainClass
    }

    task.dependsOn configurations.runtimeClasspath
    task.from {
        configurations.runtimeClasspath.filter {
            it.name.endsWith('jar') &&
                    !it.name.contains("javadoc") &&
                    !it.name.contains("sources") &&
                    (os == "all" || (!it.name.contains("natives") || it.name.contains("natives-${os}")))
        }.collect {
            zipTree(it).matching {
                exclude 'META-INF/*.DSA', 'META-INF/*.SF', 'META-INF/*.RSA', 'META-INF/INDEX.LIST', 'META-INF/**/module-info.class'
            }
        }
    }
    return task
}

tasks.register('gameJar', Jar) {
    def targetOS = project.hasProperty('targetOS') ? project.property('targetOS') : 'all'
    configureUberJarTask(it, "Xune-${version}-${targetOS}.jar", application.mainClass.get(), targetOS as String)
}

tasks.register('gameJarAll', Jar) {
    configureUberJarTask(it, "Xune-${version}-all.jar", application.mainClass.get(), "all")
}

tasks.register('gameJarLinux', Jar) {
    configureUberJarTask(it, "Xune-${version}-linux.jar", application.mainClass.get(), "linux")
}

tasks.register('gameJarWindows', Jar) {
    configureUberJarTask(it, "Xune-${version}-windows.jar", application.mainClass.get(), "windows")
}

tasks.register('gameJarMacos', Jar) {
    configureUberJarTask(it, "Xune-${version}-macos.jar", application.mainClass.get(), "macos")
}

tasks.register('clientJar', Jar) {
    def targetOS = project.hasProperty('targetOS') ? project.property('targetOS') : 'all'
    configureUberJarTask(it, "XuneClient-${version}-${targetOS}.jar", "sk.neuromancer.Xune.game.Client", targetOS as String)
}

tasks.register('clientJarAll', Jar) {
    configureUberJarTask(it, "XuneClient-${version}-all.jar", "sk.neuromancer.Xune.game.Client", "all")
}

tasks.register('clientJarLinux', Jar) {
    configureUberJarTask(it, "XuneClient-${version}-linux.jar", "sk.neuromancer.Xune.game.Client", "linux")
}

tasks.register('clientJarWindows', Jar) {
    configureUberJarTask(it, "XuneClient-${version}-windows.jar", "sk.neuromancer.Xune.game.Client", "windows")
}

tasks.register('clientJarMacos', Jar) {
    configureUberJarTask(it, "XuneClient-${version}-macos.jar", "sk.neuromancer.Xune.game.Client", "macos")
}

tasks.register('serverJar', Jar) {
    def targetOS = project.hasProperty('targetOS') ? project.property('targetOS') : 'all'
    configureUberJarTask(it, "XuneServer-${version}-${targetOS}.jar", "sk.neuromancer.Xune.game.Server", targetOS as String)
}

tasks.register('serverJarAll', Jar) {
    configureUberJarTask(it, "XuneServer-${version}-all.jar", "sk.neuromancer.Xune.game.Server", "all")
}

tasks.register('serverJarLinux', Jar) {
    configureUberJarTask(it, "XuneServer-${version}-linux.jar", "sk.neuromancer.Xune.game.Server", "linux")
}

tasks.register('serverJarWindows', Jar) {
    configureUberJarTask(it, "XuneServer-${version}-windows.jar", "sk.neuromancer.Xune.game.Server", "windows")
}

tasks.register('serverJarMacos', Jar) {
    configureUberJarTask(it, "XuneServer-${version}-macos.jar", "sk.neuromancer.Xune.game.Server", "macos")
}

tasks.register('allJars') {
    dependsOn('gameJarAll', 'gameJarLinux', 'gameJarWindows', 'gameJarMacos',
            'clientJarAll', 'clientJarLinux', 'clientJarWindows', 'clientJarMacos',
            'serverJarAll', 'serverJarLinux', 'serverJarWindows', 'serverJarMacos')
}